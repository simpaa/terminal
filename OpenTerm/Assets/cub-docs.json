{"items":[{"rawDocumentation":"\/\/\/ - Parameter x: A number.\n\/\/\/ - Returns: The absolute value of x.","title":"abs(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"A number."},"returnDescription":"The absolute value of x.","returns":true,"name":"abs"}},"definition":"func abs(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter a: A number to compare.\n\/\/\/ - Parameter b: Another number to compare.\n\/\/\/ - Returns: The lesser of a and b.","title":"min(a, b) returns","type":{"function":{"arguments":["a","b"],"argumentDescriptions":{"b":"Another number to compare.","a":"A number to compare."},"returnDescription":"The lesser of a and b.","returns":true,"name":"min"}},"definition":"func min(a, b) returns"},{"rawDocumentation":"\/\/\/ - Parameter a: A number to compare.\n\/\/\/ - Parameter b: Another number to compare.\n\/\/\/ - Returns: The greater of a and b.","title":"max(a, b) returns","type":{"function":{"arguments":["a","b"],"argumentDescriptions":{"b":"Another number to compare.","a":"A number to compare."},"returnDescription":"The greater of a and b.","returns":true,"name":"max"}},"definition":"func max(a, b) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: wether x is positive.","title":"isPositive(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"wether x is positive.","returns":true,"name":"isPositive"}},"definition":"func isPositive(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: wether x is negative.","title":"isNegative(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"wether x is negative.","returns":true,"name":"isNegative"}},"definition":"func isNegative(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: wether x is even.","title":"isEven(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"wether x is even.","returns":true,"name":"isEven"}},"definition":"func isEven(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: wether x is uneven.","title":"isUneven(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"wether x is uneven.","returns":true,"name":"isUneven"}},"definition":"func isUneven(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter n: the root.\n\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the n-root of x.","title":"root(n, x) returns","type":{"function":{"arguments":["n","x"],"argumentDescriptions":{"x":"a number.","n":"the root."},"returnDescription":"the n-root of x.","returns":true,"name":"root"}},"definition":"func root(n, x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the square root of x.","title":"sqrt(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"the square root of x.","returns":true,"name":"sqrt"}},"definition":"func sqrt(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the cube root of x.","title":"cbrt(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"the cube root of x.","returns":true,"name":"cbrt"}},"definition":"func cbrt(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: dividend\n\/\/\/ - Parameter y: divisor\n\/\/\/ - Returns: remainder","title":"rem(x, y) returns","type":{"function":{"arguments":["x","y"],"argumentDescriptions":{"y":"divisor","x":"dividend"},"returnDescription":"remainder","returns":true,"name":"rem"}},"definition":"func rem(x, y) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: dividend\n\/\/\/ - Parameter y: divisor\n\/\/\/ - Returns: modulus","title":"mod(x, y) returns","type":{"function":{"arguments":["x","y"],"argumentDescriptions":{"y":"divisor","x":"dividend"},"returnDescription":"modulus","returns":true,"name":"mod"}},"definition":"func mod(x, y) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the greatest whole number less than x.","title":"floor(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"the greatest whole number less than x.","returns":true,"name":"floor"}},"definition":"func floor(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the rounded value of x","title":"round(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"the rounded value of x","returns":true,"name":"round"}},"definition":"func round(x) returns"},{"rawDocumentation":"\/\/\/ A Range specifies a part of a value.\n\/\/\/ For example in the string \"hello\",\n\/\/\/ the range (1, 3) equals \"el\".\n\/\/\/ - lowerbound: a number specifying the start of the range.\n\/\/\/ - upperbound: a number specifying the end of the range.","title":"Range(lowerbound, upperbound)","type":{"struct":{"memberDescriptions":{"upperbound":"a number specifying the end of the range.","lowerbound":"a number specifying the start of the range."},"name":"Range","members":["lowerbound","upperbound"],"description":"A Range specifies a part of a value.\nFor example in the string \"hello\",\nthe range (1, 3) equals \"el\"."}},"definition":"struct Range(lowerbound, upperbound)"},{"rawDocumentation":"Check if a value is empty.\n- Parameter value: the value to check wether it's empty.\n- Returns: true if the value is empty, false otherwise.","title":"isEmpty(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check wether it's empty."},"returnDescription":"true if the value is empty, false otherwise.","returns":true,"name":"isEmpty","description":"Check if a value is empty."}},"definition":"func isEmpty(value) returns"},{"rawDocumentation":"Terminate the program.","title":"exit() returns","type":{"function":{"arguments":[],"argumentDescriptions":{},"returns":true,"name":"exit","description":"Terminate the program."}},"definition":"func exit() returns"},{"rawDocumentation":"Tries to parse a string to a number.\n- Parameter value: the string to parse.\n- Returns: a number if the string could be parsed, otherwise nil.","title":"parseNumber(string) returns","type":{"function":{"arguments":["string"],"argumentDescriptions":{},"returnDescription":"a number if the string could be parsed, otherwise nil.","returns":true,"name":"parseNumber","description":"Tries to parse a string to a number."}},"definition":"func parseNumber(string) returns"},{"rawDocumentation":"Get a date (represented as a number), from a string in a specified format.\n\nExample:\nmyDate = dateFromFormat(\"2012-02-20\", \"yyyy-MM-dd\")\n\n- Parameter dateString: a date in a string format.\n- Parameter format: the format that the given date string is in.\n- Returns: a date.","title":"dateFromFormat(dateString, format) returns","type":{"function":{"arguments":["dateString","format"],"argumentDescriptions":{"format":"the format that the given date string is in.","dateString":"a date in a string format."},"returnDescription":"a date.","returns":true,"name":"dateFromFormat","description":"Get a date (represented as a number), from a string in a specified format.\nExample:\nmyDate = dateFromFormat(\"2012-02-20\", \"yyyy-MM-dd\")"}},"definition":"func dateFromFormat(dateString, format) returns"},{"rawDocumentation":"Pause the script and continue when the user enters a number.\n- Returns: the number that the user entered.","title":"readNumber() returns","type":{"function":{"arguments":[],"argumentDescriptions":{},"returnDescription":"the number that the user entered.","returns":true,"name":"readNumber","description":"Pause the script and continue when the user enters a number."}},"definition":"func readNumber() returns"},{"rawDocumentation":"Pause the script and continue when the user enters a string.\n- Returns: the string that the user entered.","title":"readLine() returns","type":{"function":{"arguments":[],"argumentDescriptions":{},"returnDescription":"the string that the user entered.","returns":true,"name":"readLine","description":"Pause the script and continue when the user enters a string."}},"definition":"func readLine() returns"},{"rawDocumentation":"Get an array of ranges for all the matches of a regular expression in a given string.\n- Parameter pattern: the regular expression pattern. Cub uses the same regular expressions as Apple does, more info can be found here: https:\/\/developer.apple.com\/documentation\/foundation\/nsregularexpression#1965589.\n- Parameter string: the string to match the regular expression on.\n- Returns: an array of ranges for all the matches of the regular expression in the provided string.","title":"regex(pattern, string) returns","type":{"function":{"arguments":["pattern","string"],"argumentDescriptions":{"pattern":"the regular expression pattern. Cub uses the same regular expressions as Apple does, more info can be found here: https:\/\/developer.apple.com\/documentation\/foundation\/nsregularexpression#1965589.","string":"the string to match the regular expression on."},"returnDescription":"an array of ranges for all the matches of the regular expression in the provided string.","returns":true,"name":"regex","description":"Get an array of ranges for all the matches of a regular expression in a given string."}},"definition":"func regex(pattern, string) returns"},{"rawDocumentation":"Checks if the value is a number.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a number, false otherwise.","title":"isNumber(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a number, false otherwise.","returns":true,"name":"isNumber","description":"Checks if the value is a number."}},"definition":"func isNumber(value) returns"},{"rawDocumentation":"Checks if the value is a string.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a string, false otherwise.","title":"isString(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a string, false otherwise.","returns":true,"name":"isString","description":"Checks if the value is a string."}},"definition":"func isString(value) returns"},{"rawDocumentation":"Display something on screen.\n- Parameter input: the value you want to print.","title":"print(input) returns","type":{"function":{"arguments":["input"],"argumentDescriptions":{"input":"the value you want to print."},"returns":true,"name":"print","description":"Display something on screen."}},"definition":"func print(input) returns"},{"rawDocumentation":"Execute a shell command in the shell that the script is executed from.\n- Parameter command: The command to execute.\n- Returns: the exit code, 0 means no error.","title":"shell(command) returns","type":{"function":{"arguments":["command"],"argumentDescriptions":{"command":"The command to execute."},"returnDescription":"the exit code, 0 means no error.","returns":true,"name":"shell","description":"Execute a shell command in the shell that the script is executed from."}},"definition":"func shell(command) returns"},{"rawDocumentation":"Returns part of a string, given a range.\n- Parameter string: the string to get a part from.\n- Parameter range: the range of the part in the string you want.\n- Returns: the part of the string, for the given range.","title":"stringAtRange(string, range) returns","type":{"function":{"arguments":["string","range"],"argumentDescriptions":{"range":"the range of the part in the string you want.","string":"the string to get a part from."},"returnDescription":"the part of the string, for the given range.","returns":true,"name":"stringAtRange","description":"Returns part of a string, given a range."}},"definition":"func stringAtRange(string, range) returns"},{"rawDocumentation":"Checks if the value is an array.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is an array, false otherwise.","title":"isArray(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is an array, false otherwise.","returns":true,"name":"isArray","description":"Checks if the value is an array."}},"definition":"func isArray(value) returns"},{"rawDocumentation":"Add a specific amount of a date unit to a given date.\n\nExample:\nmyDate = currentDate()\ntomorrowThisTime = dateByAdding(1, \"day\", myDate)\n\n- Parameter value: the number that you want to add to the given date, in the given unit.\n- Parameter unit: a string that represents a date unit. One of the following values: \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"\n- Parameter date: a number that represents a date.\n- Returns: a number representing the given date, having added the value in the specified unit.","title":"dateByAdding(value, unit, date) returns","type":{"function":{"arguments":["value","unit","date"],"argumentDescriptions":{"date":"a number that represents a date.","value":"the number that you want to add to the given date, in the given unit.","unit":"a string that represents a date unit. One of the following values: \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\""},"returnDescription":"a number representing the given date, having added the value in the specified unit.","returns":true,"name":"dateByAdding","description":"Add a specific amount of a date unit to a given date.\nExample:\nmyDate = currentDate()\ntomorrowThisTime = dateByAdding(1, \"day\", myDate)"}},"definition":"func dateByAdding(value, unit, date) returns"},{"rawDocumentation":"Get the size of a value.\nFor arrays this returns the number of elements in the array.\nFor strings this returns the length.\n- Parameter value: the value to get the size of.\n- Returns: size of value.","title":"sizeOf(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to get the size of."},"returnDescription":"size of value.","returns":true,"name":"sizeOf","description":"Get the size of a value.\nFor arrays this returns the number of elements in the array.\nFor strings this returns the length."}},"definition":"func sizeOf(value) returns"},{"rawDocumentation":"Get a formatted date (a string) from a date (represented as a number) in a specified format.\n\nExample:\nmyDate = currentDate()\nmyDateString = formattedDate(myDate, \"yyyy-MM-dd\")\n\n- Parameter date: a number representing a date.\n- Parameter format: the format to get the date in.\n- Returns: a string of the given date, formatted.","title":"formattedDate(date, format) returns","type":{"function":{"arguments":["date","format"],"argumentDescriptions":{"date":"a number representing a date.","format":"the format to get the date in."},"returnDescription":"a string of the given date, formatted.","returns":true,"name":"formattedDate","description":"Get a formatted date (a string) from a date (represented as a number) in a specified format.\nExample:\nmyDate = currentDate()\nmyDateString = formattedDate(myDate, \"yyyy-MM-dd\")"}},"definition":"func formattedDate(date, format) returns"},{"rawDocumentation":"Split a string into smaller strings.\n- Parameter string: the string to split.\n- Parameter separator: the separator to split by.\n- Returns: an array of strings.","title":"split(string, separator) returns","type":{"function":{"arguments":["string","separator"],"argumentDescriptions":{"string":"the string to split.","separator":"the separator to split by."},"returnDescription":"an array of strings.","returns":true,"name":"split","description":"Split a string into smaller strings."}},"definition":"func split(string, separator) returns"},{"rawDocumentation":"Execute a shell command in the shell that the script is executed from, while capturing the output. The output will not be printed to the screen, it will be returned from this function as a string.\n- Parameter command: The command to execute.\n- Returns: the output from the command.","title":"captureShell(command) returns","type":{"function":{"arguments":["command"],"argumentDescriptions":{"command":"The command to execute."},"returnDescription":"the output from the command.","returns":true,"name":"captureShell","description":"Execute a shell command in the shell that the script is executed from, while capturing the output. The output will not be printed to the screen, it will be returned from this function as a string."}},"definition":"func captureShell(command) returns"},{"rawDocumentation":"Get the current date and time, represented as a number.\n- Returns: a number representing the current date and time.","title":"currentDate() returns","type":{"function":{"arguments":[],"argumentDescriptions":{},"returnDescription":"a number representing the current date and time.","returns":true,"name":"currentDate","description":"Get the current date and time, represented as a number."}},"definition":"func currentDate() returns"},{"rawDocumentation":"Checks if the value is a boolean.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a boolean, false otherwise.","title":"isBool(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a boolean, false otherwise.","returns":true,"name":"isBool","description":"Checks if the value is a boolean."}},"definition":"func isBool(value) returns"},{"rawDocumentation":"Get a random number.\n\nExample:\nmyDiceRoll = randomNumber(1, 6)\n\n- Parameter min: minimum number.\n- Parameter max: maximum number.\n- Returns: a random number.","title":"randomNumber(min, max) returns","type":{"function":{"arguments":["min","max"],"argumentDescriptions":{"min":"minimum number.","max":"maximum number."},"returnDescription":"a random number.","returns":true,"name":"randomNumber","description":"Get a random number.\nExample:\nmyDiceRoll = randomNumber(1, 6)"}},"definition":"func randomNumber(min, max) returns"},{"rawDocumentation":"Get a formatted string with an argument.\n\nExample:\nformattedNumber = format(\"%.f\", 1.0) \/\/ \"1\"\n\n- Parameter input: a string template.\n- Parameter arg: the argument to insert in the template.\n- Returns: a formatted string.","title":"format(input, arg) returns","type":{"function":{"arguments":["input","arg"],"argumentDescriptions":{"input":"a string template.","arg":"the argument to insert in the template."},"returnDescription":"a formatted string.","returns":true,"name":"format","description":"Get a formatted string with an argument.\nExample:\nformattedNumber = format(\"%.f\", 1.0) \/\/ \"1\""}},"definition":"func format(input, arg) returns"},{"rawDocumentation":"Checks if the value is a struct.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a struct, false otherwise.","title":"isStruct(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a struct, false otherwise.","returns":true,"name":"isStruct","description":"Checks if the value is a struct."}},"definition":"func isStruct(value) returns"},{"rawDocumentation":"Display something on screen with a new line added at the end.\n- Parameter input: the value you want to print.","title":"println(input) returns","type":{"function":{"arguments":["input"],"argumentDescriptions":{"input":"the value you want to print."},"returns":true,"name":"println","description":"Display something on screen with a new line added at the end."}},"definition":"func println(input) returns"},{"rawDocumentation":"An array of values that were passed to this script.","title":"parameters","type":{"variable":{"name":"parameters","description":"An array of values that were passed to this script."}},"definition":"parameters"}]}
