diff -Naur shell_cmds-203/date/date.c shell_cmds/date/date.c
--- shell_cmds-203/date/date.c	2015-11-07 23:19:55.000000000 +0100
+++ shell_cmds/date/date.c	2018-01-10 11:31:01.000000000 +0100
@@ -47,7 +47,7 @@
 #include <sys/stat.h>
 
 #include <ctype.h>
-#include <err.h>
+// #include <err.h>
 #include <locale.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -57,13 +57,15 @@
 #include <utmpx.h>
 
 #ifdef __APPLE__
-#include <get_compat.h>
-#else
+// #include <get_compat.h>
+// #else
 #define COMPAT_MODE(a,b) (1)
 #endif /* __APPLE__ */
 
 #include "extern.h"
 #include "vary.h"
+#include <errno.h>
+#include "ios_error.h"
 
 #ifndef	TM_YEAR_BASE
 #define	TM_YEAR_BASE	1900
@@ -84,7 +86,7 @@
 static const char *rfc2822_format = "%a, %d %b %Y %T %z";
 
 int
-main(int argc, char *argv[])
+date_main(int argc, char *argv[])
 {
 	struct timezone tz;
 	int ch, rflag;
@@ -107,6 +109,7 @@
 	tz.tz_dsttime = tz.tz_minuteswest = 0;
 	rflag = 0;
 	jflag = nflag = Rflag = 0;
+    optind = 1; opterr = 1; optreset = 1;
 	set_timezone = 0;
 	while ((ch = getopt(argc, argv, "d:f:jnRr:t:uv:")) != -1)
 		switch((char)ch) {
@@ -161,11 +164,17 @@
 	 * If -d or -t, set the timezone or daylight savings time; this
 	 * doesn't belong here; the kernel should not know about either.
 	 */
-	if (set_timezone && settimeofday(NULL, &tz) != 0)
-		err(1, "settimeofday (timezone)");
-
-	if (!rflag && time(&tval) == -1)
-		err(1, "time");
+    if (set_timezone && settimeofday(NULL, &tz) != 0) {
+		// err(1, "settimeofday (timezone)");
+        fprintf(stderr, "date: settimeofday (timezone): %s\n", strerror(errno));
+        pthread_exit(NULL);
+    }
+
+    if (!rflag && time(&tval) == -1) {
+		// err(1, "time");
+        fprintf(stderr, "date: time: %s\n", strerror(errno));
+        pthread_exit(NULL);
+    }
 
 	format = "%+";
 
@@ -191,7 +200,9 @@
 	/* 7999711 */
 	struct tm *ltp = localtime(&tval);
 	if (ltp == NULL) {
-		err(1, "localtime");
+		// err(1, "localtime");
+        fprintf(stderr, "date: localtime: %s\n", strerror(errno));
+        pthread_exit(NULL);
 	}
 	lt = *ltp;
 #else
@@ -215,8 +226,11 @@
 
 	(void)strftime(buf, sizeof(buf), format, &lt);
 	(void)printf("%s\n", buf);
-	if (fflush(stdout))
-		err(1, "stdout");
+    if (fflush(stdout)) {
+		// err(1, "stdout");
+        fprintf(stderr, "date: stdout: %s\n", strerror(errno));
+        pthread_exit(NULL);
+    }
 	/*
 	 * If date/time could not be set/notified in the other hosts as
 	 * determined by netsetval(), a return value 2 is set, which is
@@ -319,19 +333,25 @@
 	}
 
 	/* convert broken-down time to GMT clock time */
-	if ((tval = mktime(lt)) == -1)
-		errx(1, "nonexistent time");
+    if ((tval = mktime(lt)) == -1) {
+		// errx(1, "nonexistent time");
+        fprintf(stderr, "date: nonexistent time\n");
+        pthread_exit(NULL);
+    }
 
 	if (!jflag) {
 		/* set the time */
-		if (nflag || netsettime(tval)) {
+		if (nflag /* || netsettime(tval)*/ ) {
 			utx.ut_type = OLD_TIME;
 			(void)gettimeofday(&utx.ut_tv, NULL);
 			pututxline(&utx);
 			tv.tv_sec = tval;
 			tv.tv_usec = 0;
-			if (settimeofday(&tv, NULL) != 0)
-				err(1, "settimeofday (timeval)");
+            if (settimeofday(&tv, NULL) != 0) {
+				// err(1, "settimeofday (timeval)");
+                fprintf(stderr, "date: settimeofday (timeval): %s\n", strerror(errno));
+                pthread_exit(NULL);
+            }
 			utx.ut_type = NEW_TIME;
 			(void)gettimeofday(&utx.ut_tv, NULL);
 			pututxline(&utx);
@@ -346,7 +366,8 @@
 static void
 badformat(void)
 {
-	warnx("illegal time format");
+    fprintf(stderr, "date: illegal time format\n");
+    // warnx("illegal time format");
 	usage();
 }
 
diff -Naur shell_cmds-203/date/vary.c shell_cmds/date/vary.c
--- shell_cmds-203/date/vary.c	2015-11-07 23:19:55.000000000 +0100
+++ shell_cmds/date/vary.c	2018-01-10 11:31:01.000000000 +0100
@@ -27,11 +27,14 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD$");
 
-#include <err.h>
+// #include <err.h>
 #include <time.h>
 #include <string.h>
 #include <stdlib.h>
+#include <stdio.h>
 #include "vary.h"
+#include <errno.h>
+#include "ios_error.h"
 
 struct trans {
   int val;
@@ -92,8 +95,11 @@
   } else
     nextp = &result;
 
-  if ((*nextp = (struct vary *)malloc(sizeof(struct vary))) == NULL)
-    err(1, "malloc");
+    if ((*nextp = (struct vary *)malloc(sizeof(struct vary))) == NULL) {
+        // err(1, "malloc");
+        fprintf(stderr, "date: malloc: %s\n", strerror(errno));
+        pthread_exit(NULL);
+    }
   (*nextp)->arg = arg;
   (*nextp)->next = NULL;
   return result;
diff -Naur shell_cmds-203/echo/echo.c shell_cmds/echo/echo.c
--- shell_cmds-203/echo/echo.c	2006-12-21 02:07:57.000000000 +0100
+++ shell_cmds/echo/echo.c	2018-01-11 17:58:57.000000000 +0100
@@ -50,6 +50,10 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+// iOS
+#include <stdio.h>
+#include "ios_error.h"
+#include <pthread.h>
 
 /*
  * Report an error and exit.
@@ -59,17 +63,18 @@
 errexit(const char *prog, const char *reason)
 {
 	char *errstr = strerror(errno);
-	write(STDERR_FILENO, prog, strlen(prog));
-	write(STDERR_FILENO, ": ", 2);
-	write(STDERR_FILENO, reason, strlen(reason));
-	write(STDERR_FILENO, ": ", 2);
-	write(STDERR_FILENO, errstr, strlen(errstr));
-	write(STDERR_FILENO, "\n", 1);
-	exit(1);
+    fprintf(stderr, "%s: %s: %s\n", prog, reason, errstr);
+//    write(STDERR_FILENO, prog, strlen(prog));
+//    write(STDERR_FILENO, ": ", 2);
+//    write(STDERR_FILENO, reason, strlen(reason));
+//    write(STDERR_FILENO, ": ", 2);
+//    write(STDERR_FILENO, errstr, strlen(errstr));
+//    write(STDERR_FILENO, "\n", 1);
+    pthread_exit(NULL); // exit(1);
 }
 	
 int
-main(int argc, char *argv[])
+echo_main(int argc, char *argv[])
 {
 	int nflag;	/* if not set, output a trailing newline. */
 	int veclen;	/* number of writev arguments. */
@@ -128,8 +133,14 @@
 		int nwrite;
 
 		nwrite = (veclen > IOV_MAX) ? IOV_MAX : veclen;
-		if (writev(STDOUT_FILENO, iov, nwrite) == -1)
-			errexit(progname, "write");
+        // if (writev(STDOUT_FILENO, iov, nwrite) == -1)
+        //         errexit(progname, "write");
+        struct iovec *cp = iov;
+        for (int i = 0; i < nwrite; i++) {
+            if (fprintf(stdout, "%s", (char*)(cp->iov_base)) == -1)
+                errexit(progname, "write");
+            cp++;
+        }
 		iov += nwrite;
 		veclen -= nwrite;
 	}
diff -Naur shell_cmds-203/env/env.c shell_cmds/env/env.c
--- shell_cmds-203/env/env.c	2014-08-05 00:47:11.000000000 +0200
+++ shell_cmds/env/env.c	2018-01-10 11:31:01.000000000 +0100
@@ -42,7 +42,7 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD$");
 
-#include <err.h>
+// #include <err.h>
 #include <errno.h>
 #include <stdio.h>
 #include <string.h>
@@ -50,6 +50,7 @@
 #include <unistd.h>
 
 #include "envopts.h"
+#include "ios_error.h"
 
 extern char **environ;
 
@@ -58,7 +59,7 @@
 static void usage(void);
 
 int
-main(int argc, char **argv)
+env_main(int argc, char **argv)
 {
 	char *altpath, **ep, *p, **parg;
 	char *cleanenv[1];
@@ -67,6 +68,7 @@
 
 	altpath = NULL;
 	want_clear = 0;
+    optind = 1; opterr = 1; optreset = 1;
 	while ((ch = getopt(argc, argv, "-iP:S:u:v")) != -1)
 		switch(ch) {
 		case '-':
@@ -87,8 +89,11 @@
 			if (env_verbosity)
 				fprintf(stderr, "#env unset:\t%s\n", optarg);
 			rtrn = unsetenv(optarg);
-			if (rtrn == -1)
-				err(EXIT_FAILURE, "unsetenv %s", optarg);
+            if (rtrn == -1) {
+				// err(EXIT_FAILURE, "unsetenv %s", optarg);
+                fprintf(stderr, "unsetenv %s: %s\n", optarg, strerror(errno));
+                pthread_exit(NULL);
+            }
 			break;
 		case 'v':
 			env_verbosity++;
@@ -112,8 +117,11 @@
 		*p = '\0';
 		rtrn = setenv(*argv, p + 1, 1);
 		*p = '=';
-		if (rtrn == -1)
-			err(EXIT_FAILURE, "setenv %s", *argv);
+        if (rtrn == -1) {
+			// err(EXIT_FAILURE, "setenv %s", *argv);
+            fprintf(stderr, "setenv %s: %s\n", *argv, strerror(errno));
+            pthread_exit(NULL);
+        }
 	}
 	if (*argv) {
 		if (altpath)
@@ -126,8 +134,10 @@
 			if (env_verbosity > 1)
 				sleep(1);
 		}
-		execvp(*argv, argv);
-		err(errno == ENOENT ? 127 : 126, "%s", *argv);
+        execvp(*argv, argv);
+        fprintf(stderr, "env: %s: %s\n", *argv, strerror(errno));
+        pthread_exit(NULL);
+		// err(errno == ENOENT ? 127 : 126, "%s", *argv);
 	}
 	for (ep = environ; *ep; ep++)
 		(void)printf("%s\n", *ep);
diff -Naur shell_cmds-203/env/envopts.c shell_cmds/env/envopts.c
--- shell_cmds-203/env/envopts.c	2014-08-05 00:47:11.000000000 +0200
+++ shell_cmds/env/envopts.c	2018-01-10 11:31:01.000000000 +0100
@@ -33,7 +33,7 @@
 
 #include <sys/stat.h>
 #include <sys/param.h>
-#include <err.h>
+// #include <err.h>
 #include <errno.h>
 #include <ctype.h>
 #include <stdio.h>
@@ -42,6 +42,7 @@
 #include <unistd.h>
 
 #include "envopts.h"
+#include "ios_error.h"
 
 static const char *
 		 expand_vars(int in_thisarg, char **thisarg_p, char **dest_p,
@@ -125,7 +126,9 @@
 
 	if (fqname == NULL) {
 		errno = ENOENT;
-		err(127, "%s", filename);
+		// err(127, "%s", filename);
+        fprintf(stderr, "env: %s: %s\n", filename, strerror(errno));
+        pthread_exit(NULL);
 	}
 	*argv = strdup(candidate);
 }
@@ -285,9 +288,12 @@
 				 * This would not make sense if found in the
 				 * middle of a quoted string.
 				 */
-				if (in_dq)
-					errx(1, "Sequence '\\%c' is not allowed"
-					    " in quoted strings", *src);
+                if (in_dq) {
+                    // errx(1, "Sequence '\\%c' is not allowed"
+                    fprintf(stderr, "env: Sequence '\\%c' is not allowed"
+					    " in quoted strings\n", *src);
+                    pthread_exit(NULL);
+                }
 				goto str_done;
 			case 'f':
 				copychar = '\f';
@@ -307,9 +313,12 @@
 			default:
 				if (isspacech(*src))
 					copychar = *src;
-				else
-					errx(1, "Invalid sequence '\\%c' in -S",
+                else {
+                    // errx(1, "Invalid sequence '\\%c' in -S",
+                    fprintf(stderr, "env: Invalid sequence '\\%c' in -S\n",
 					    *src);
+                    pthread_exit(NULL);
+                }
 			}
 			break;
 		default:
@@ -355,8 +364,10 @@
 	*dest = '\0';
 	*nextarg = NULL;
 	if (in_dq || in_sq) {
-		errx(1, "No terminating quote for string: %.*s%s",
+        // errx(1, "No terminating quote for string: %.*s%s",
+        fprintf(stderr, "env: No terminating quote for string: %.*s%s\n",
 		    bq_destlen, *(nextarg - 1), bq_src);
+        pthread_exit(NULL);
 	}
 	if (env_verbosity > 1) {
 		fprintf(stderr, "#env  split -S:\t'%s'\n", str);
@@ -403,9 +414,12 @@
 			if (*vend == '}')
 				bad_reference = 0;
 		}
-	if (bad_reference)
-		errx(1, "Only ${VARNAME} expansion is supported, error at: %s",
+    if (bad_reference) {
+        // errx(1, "Only ${VARNAME} expansion is supported, error at: %s",
+        fprintf(stderr, "env: Only ${VARNAME} expansion is supported, error at: %s\n",
 		    *src_p);
+        pthread_exit(NULL);
+    }
 
 	/*
 	 * We now know we have a valid environment variable name, so update
diff -Naur shell_cmds-203/id/id.c shell_cmds/id/id.c
--- shell_cmds-203/id/id.c	2014-02-18 21:44:21.000000000 +0100
+++ shell_cmds/id/id.c	2018-01-10 11:31:01.000000000 +0100
@@ -54,7 +54,7 @@
 #include <bsm/audit.h>
 #endif
 
-#include <err.h>
+// #include <err.h>
 #include <errno.h>
 #include <grp.h>
 #include <pwd.h>
@@ -62,18 +62,19 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include "ios_error.h"
 
-void	id_print(struct passwd *, int, int, int);
-void	pline(struct passwd *);
-void	pretty(struct passwd *);
-void	auditid(void);
-void	fullname(struct passwd *);
-void	group(struct passwd *, int);
-void	maclabel(void);
-void	usage(void);
+static void	id_print(struct passwd *, int, int, int);
+static void	pline(struct passwd *);
+static void	pretty(struct passwd *);
+static void	auditid(void);
+static void	fullname(struct passwd *);
+static void	group(struct passwd *, int);
+static void	maclabel(void);
+static void	usage(void);
 struct passwd *who(char *);
 
-int isgroups, iswhoami;
+static int isgroups, iswhoami;
 
 #ifdef __APPLE__
 // SPI for 5235093
@@ -81,7 +82,7 @@
 #endif
 
 int
-main(int argc, char *argv[])
+id_main(int argc, char *argv[])
 {
 	struct group *gr;
 	struct passwd *pw;
@@ -93,6 +94,10 @@
 	Gflag = Mflag = Pflag = gflag = nflag = pflag = rflag = uflag = 0;
 	Aflag = 0;
 	Fflag = 0;
+    optind = 1; opterr = 1; optreset = 1;
+    // Initialize:
+    isgroups = 0;
+    iswhoami = 0;
 
 	myname = strrchr(argv[0], '/');
 	myname = (myname != NULL) ? myname + 1 : argv[0];
@@ -241,8 +246,11 @@
 		(void)printf("groups\t");
 		group(pw, 1);
 	} else {
-		if ((login = getlogin()) == NULL)
-			err(1, "getlogin");
+        if ((login = getlogin()) == NULL) {
+			// err(1, "getlogin");
+            fprintf(stderr, "id: getlogin: %s\n", strerror(errno));
+            pthread_exit(NULL);
+        }
 
 		pw = getpwuid(rid = getuid());
 		if (pw == NULL || strcmp(login, pw->pw_name))
@@ -318,7 +326,8 @@
 
 #ifdef __APPLE__
 	if (ngroups < 0)
-		warn("failed to retrieve group list");
+        fprintf(stderr, "id: failed to retrieve group list: %s\n", strerror(errno));
+        // warn("failed to retrieve group list");
 #endif
 
 	if (pw != NULL)
@@ -360,8 +369,11 @@
 {
 	auditinfo_addr_t auditinfo;
 
-	if (getaudit_addr(&auditinfo, sizeof(auditinfo)) < 0)
-		err(1, "getaudit");
+    if (getaudit_addr(&auditinfo, sizeof(auditinfo)) < 0) {
+		// err(1, "getaudit");
+        fprintf(stderr, "id: getaudit: %s\n", strerror(errno));
+        pthread_exit(NULL);
+    }
 	printf("auid=%d\n", auditinfo.ai_auid);
 	printf("mask.success=0x%08x\n", auditinfo.ai_mask.am_success);
 	printf("mask.failure=0x%08x\n", auditinfo.ai_mask.am_failure);
@@ -375,8 +387,11 @@
 {
 
 	if (!pw) {
-		if ((pw = getpwuid(getuid())) == NULL)
-			err(1, "getpwuid");
+        if ((pw = getpwuid(getuid())) == NULL) {
+			// err(1, "getpwuid");
+            fprintf(stderr, "id: getpwuid: %s\n", strerror(errno));
+            pthread_exit(NULL);
+        }
 	}
 
 	(void)printf("%s\n", pw->pw_gecos);
@@ -442,14 +457,16 @@
 maclabel(void)
 {
 #ifdef __APPLE__
-	errx(1, "-M unsupported");
+	// errx(1, "-M unsupported");
+    fprintf(stderr, "id: -M unsupported");
+    pthread_exit(NULL);
 #else /* !__APPLE__ */
 	char *string;
 	mac_t label;
 	int error;
 
 	error = mac_prepare_process_label(&label);
-	if (error == -1)
+    if (error == -1)
 		errx(1, "mac_prepare_type: %s", strerror(errno));
 
 	error = mac_get_proc(label);
@@ -482,7 +499,10 @@
 	id = strtol(u, &ep, 10);
 	if (*u && !*ep && (pw = getpwuid(id)))
 		return(pw);
-	errx(1, "%s: no such user", u);
+	// errx(1, "%s: no such user", u);
+    fprintf(stderr, "id: %s: no such user", u);
+    pthread_exit(NULL);
+    return NULL; // keep compiler happy
 	/* NOTREACHED */
 }
 
@@ -491,8 +511,11 @@
 {
 
 	if (!pw) {
-		if ((pw = getpwuid(getuid())) == NULL)
-			err(1, "getpwuid");
+        if ((pw = getpwuid(getuid())) == NULL) {
+			// err(1, "getpwuid");
+            fprintf(stderr, "id: getpwuid: %s\n", strerror(errno));
+            pthread_exit(NULL);
+        }
 	}
 
 	(void)printf("%s:%s:%d:%d:%s:%ld:%ld:%s:%s:%s\n", pw->pw_name,
diff -Naur shell_cmds-203/printenv/printenv.c shell_cmds/printenv/printenv.c
--- shell_cmds-203/printenv/printenv.c	2014-08-05 00:47:11.000000000 +0200
+++ shell_cmds/printenv/printenv.c	2018-01-10 11:31:01.000000000 +0100
@@ -48,8 +48,9 @@
 #include <stdio.h>
 #include <string.h>
 #include <unistd.h>
+#include "ios_error.h"
 
-void	usage(void);
+static void	usage(void);
 extern char **environ;
 
 /*
@@ -59,11 +60,12 @@
  * February, 1979
  */
 int
-main(int argc, char *argv[])
+printenv_main(int argc, char *argv[])
 {
 	char *cp, **ep;
 	size_t len;
 	int ch;
+    optind = 1; opterr = 1; optreset = 1;
 
 	while ((ch = getopt(argc, argv, "")) != -1)
 		switch(ch) {
@@ -91,7 +93,7 @@
 	exit(1);
 }
 
-void
+static void
 usage(void)
 {
 	(void)fprintf(stderr, "usage: printenv [name]\n");
diff -Naur shell_cmds-203/pwd/pwd.c shell_cmds/pwd/pwd.c
--- shell_cmds-203/pwd/pwd.c	2006-09-12 00:14:13.000000000 +0200
+++ shell_cmds/pwd/pwd.c	2018-01-10 11:31:01.000000000 +0100
@@ -45,21 +45,24 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 
-#include <err.h>
+// #include <err.h>
 #include <errno.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <string.h>
+#include "ios_error.h"
 
 static char *getcwd_logical(void);
-void usage(void);
+static void usage(void);
 
 int
-main(int argc, char *argv[])
+pwd_main(int argc, char *argv[])
 {
 	int physical;
 	int ch;
 	char *p;
+    optind = 1; opterr = 1; optreset = 1;
 
 	// 4207130
 	physical = 0;
@@ -91,13 +94,16 @@
 	if ((!physical && (p = getcwd_logical()) != NULL) ||
 	    ((physical || errno == ENOENT) && (p = getcwd(NULL, 0)) != NULL))
 		printf("%s\n", p);
-	else
-		err(1, ".");
+    else {
+		// err(1, ".");
+        fprintf(stderr, "pwd: .: %s\n", strerror(errno));
+        pthread_exit(NULL);
+    }
 
 	exit(0);
 }
 
-void
+static void
 usage(void)
 {
 
diff -Naur shell_cmds-203/uname/uname.c shell_cmds/uname/uname.c
--- shell_cmds-203/uname/uname.c	2013-09-26 01:55:54.000000000 +0200
+++ shell_cmds/uname/uname.c	2018-01-10 11:31:01.000000000 +0100
@@ -42,21 +42,23 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
-#include <err.h>
+// #include <err.h>
 #ifdef __APPLE__
 #include <string.h>
 #endif /* __APPLE__ */
 
 #include <sys/sysctl.h>
 #include <sys/utsname.h>
+#include <errno.h>
+#include "ios_error.h"
 
 #ifdef __APPLE__
-#include <get_compat.h>
-#else  /* !__APPLE__ */
+// #include <get_compat.h>
+// #else  /* !__APPLE__ */
 #define COMPAT_MODE(a,b) (1)
 #endif /* __APPLE__ */
 
-int	main __P((int, char **));
+int	uname_main __P((int, char **));
 static void usage __P((void));
 
 /* Note that PRINT_MACHINE_ARCH is excluded from PRINT_ALL! */
@@ -70,7 +72,7 @@
     (PRINT_SYSNAME|PRINT_NODENAME|PRINT_RELEASE|PRINT_VERSION|PRINT_MACHINE)
 
 int
-main(argc, argv) 
+uname_main(argc, argv) 
 	int argc;
 	char **argv;
 {
@@ -81,7 +83,8 @@
 	int c;
 	int space = 0;
 	int print_mask = 0;
-
+    optind = 1; opterr = 1; optreset = 1;
+    
 	(void)setlocale(LC_ALL, "");
 
 	while ((c = getopt(argc,argv,"amnprsv")) != -1) {
@@ -128,7 +131,9 @@
 	}
 
 	if (uname(&u) != 0) {
-		err(EXIT_FAILURE, "uname");
+		// err(EXIT_FAILURE, "uname");
+        fprintf(stderr, "uname: %s\n", strerror(errno));
+        pthread_exit(NULL);
 		/* NOTREACHED */
 	}
 #ifndef __APPLE__
diff -Naur shell_cmds-203/w/fmt.c shell_cmds/w/fmt.c
--- shell_cmds-203/w/fmt.c	2007-01-19 02:15:36.000000000 +0100
+++ shell_cmds/w/fmt.c	2018-01-10 11:31:01.000000000 +0100
@@ -39,13 +39,13 @@
 #include <sys/time.h>
 #include <sys/resource.h>
 
-#include <err.h>
+// #include <err.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
 #include <vis.h>
-
+#include "ios_error.h"
 //#include "ps.h"
 
 static char *cmdpart(char *);
@@ -64,10 +64,16 @@
 	static char *buf = NULL;
 
 	if (buf == NULL) {
-		if ((arg_max = sysconf(_SC_ARG_MAX)) == -1)
-			errx(1, "sysconf _SC_ARG_MAX failed");
-		if ((buf = malloc((u_int)(4 * arg_max)  +  1)) == NULL)
-			errx(1, "malloc failed");
+        if ((arg_max = sysconf(_SC_ARG_MAX)) == -1) {
+			// errx(1, "sysconf _SC_ARG_MAX failed");
+            fprintf(stderr, "w: sysconf _SC_ARG_MAX failed\n");
+            pthread_exit(NULL);
+        }
+        if ((buf = malloc((u_int)(4 * arg_max)  +  1)) == NULL) {
+			// errx(1, "malloc failed");
+            fprintf(stderr, "w: malloc failed\n");
+            pthread_exit(NULL);
+        }
 	}
 
 	if (*argv == 0) {
diff -Naur shell_cmds-203/w/proc_compare.c shell_cmds/w/proc_compare.c
--- shell_cmds-203/w/proc_compare.c	2007-01-19 02:15:36.000000000 +0100
+++ shell_cmds/w/proc_compare.c	2018-01-10 11:31:01.000000000 +0100
@@ -38,13 +38,15 @@
 __FBSDID("$FreeBSD: src/usr.bin/w/proc_compare.c,v 1.9 2004/04/14 09:34:17 bde Exp $");
 #endif
 
+#define HAVE_UTMPX 1
 #include <sys/param.h>
 #ifdef __APPLE__
 #include <sys/time.h>
 #endif
 #include <sys/proc.h>
 #include <sys/time.h>
-#include <sys/user.h>
+// #include <sys/user.h>
+#include <sys/sysctl.h>
 
 #include "extern.h"
 
diff -Naur shell_cmds-203/w/w.c shell_cmds/w/w.c
--- shell_cmds-203/w/w.c	2007-10-03 11:55:12.000000000 +0200
+++ shell_cmds/w/w.c	2018-01-10 11:31:01.000000000 +0100
@@ -50,15 +50,16 @@
  * This program is similar to the systat command on Tenex/Tops 10/20
  *
  */
+#define HAVE_UTMPX 1
 #include <sys/param.h>
 #include <sys/time.h>
 #include <sys/stat.h>
 #include <sys/sysctl.h>
 #include <sys/proc.h>
-#include <sys/user.h>
+// #include <sys/user.h>
 #include <sys/ioctl.h>
 #include <sys/socket.h>
-#include <sys/tty.h>
+// #include <sys/tty.h>
 
 #ifndef __APPLE__
 #include <machine/cpu.h>
@@ -68,7 +69,7 @@
 #include <arpa/nameser.h>
 
 #include <ctype.h>
-#include <err.h>
+// #include <err.h>
 #include <errno.h>
 #include <fcntl.h>
 #if HAVE_KVM
@@ -79,13 +80,13 @@
 #include <limits.h>
 #include <locale.h>
 #include <netdb.h>
-#include <nlist.h>
+#include <mach-o/nlist.h>
 #include <paths.h>
 #include <resolv.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <timeconv.h>
+// #include <timeconv.h>
 #include <unistd.h>
 #if HAVE_UTMPX
 #include <utmpx.h>
@@ -100,6 +101,7 @@
 #include <TargetConditionals.h>
 
 #include "extern.h"
+#include "ios_error.h"
 
 struct timeval	boottime;
 #if !HAVE_UTMPX
@@ -127,8 +129,8 @@
 /*
  * One of these per active utmp entry.
  */
-struct	entry {
-	struct	entry *next;
+static struct	utmp_entry {
+	struct	utmp_entry *next;
 #if HAVE_UTMPX
 	struct	utmpx utmp;
 #else
@@ -161,7 +163,7 @@
 char *fmt_argv(char **, char *, int);	/* ../../bin/ps/fmt.c */
 
 int
-main(int argc, char *argv[])
+w_main(int argc, char *argv[])
 {
 	struct kinfo_proc *kp;
 	struct kinfo_proc *kprocbuf;
@@ -200,6 +202,7 @@
 	use_ampm = (*nl_langinfo(T_FMT_AMPM) != '\0');
 	use_comma = (*nl_langinfo(RADIXCHAR) != ',');
 #endif
+    optind = 1; opterr = 1; optreset = 1;
 
 	/* Are we w(1) or uptime(1)? */
 	if (this_is_uptime(argv[0]) == 0) {
@@ -251,7 +254,8 @@
 #endif
 #ifdef __APPLE__
 		case 'd':
-			warnx("[-MNdflnsuw] no longer supported");
+            fprintf(stderr, "w: [-MNdflnsuw] no longer supported\n");
+            // warnx("[-MNdflnsuw] no longer supported");
 #else
 			warnx("[-flsuw] no longer supported");
 #endif
@@ -278,16 +282,22 @@
 	if (dropgid)
 		setgid(getgid());
 
-	if ((kd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, errbuf)) == NULL)
-		errx(1, "%s", errbuf);
+    if ((kd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, errbuf)) == NULL) {
+		// errx(1, "%s", errbuf);
+        fprintf(stderr, "w: %s\n", errbuf);
+        pthread_exit(NULL);
+    }
 #endif
 
 	(void)time(&now);
 #if HAVE_UTMPX
 	setutxent();
 #else
-	if ((ut = fopen(_PATH_UTMP, "r")) == NULL)
-		err(1, "%s", _PATH_UTMP);
+    if ((ut = fopen(_PATH_UTMP, "r")) == NULL) {
+		// err(1, "%s", _PATH_UTMP);
+        fprintf(stderr, "w: %s: %s\n", _PATH_UTMP, strerror(errno));
+        pthread_exit(NULL);
+    }
 #endif
 
 	if (*argv)
@@ -324,8 +334,11 @@
 			if (!usermatch)
 				continue;
 		}
-		if ((ep = calloc(1, sizeof(struct entry))) == NULL)
-			errx(1, "calloc");
+        if ((ep = calloc(1, sizeof(struct utmp_entry))) == NULL) {
+			// errx(1, "calloc");
+            fprintf(stderr, "w: calloc\n");
+            pthread_exit(NULL);
+        }
 		*nextp = ep;
 		nextp = &ep->next;
 #if HAVE_UTMPX
@@ -394,8 +407,11 @@
 	}
 
 #if HAVE_KVM
-	if ((kp = kvm_getprocs(kd, KERN_PROC_ALL, 0, &nentries)) == NULL)
-		err(1, "%s", kvm_geterr(kd));
+    if ((kp = kvm_getprocs(kd, KERN_PROC_ALL, 0, &nentries)) == NULL) {
+		// err(1, "%s", kvm_geterr(kd));
+        fprintf(stderr, "w: %s: %s\n", kvm_geterr(kd), strerror(errno));
+        pthread_exit(NULL);
+    }
 #else
 	mib[0] = CTL_KERN;
 	mib[1] = KERN_PROC;
@@ -484,12 +500,15 @@
 #else
 		w_getargv();
 #endif /* HAVE_KVM */
-		if (ep->args == NULL)
-			err(1, NULL);
+        if (ep->args == NULL) {
+            fprintf(stderr, "w: %s\n", strerror(errno));
+            pthread_exit(NULL);
+			// err(1, NULL);
+        }
 	}
 	/* sort by idle time */
 	if (sortidle && ehead != NULL) {
-		struct entry *from, *save;
+		struct utmp_entry *from, *save;
 
 		from = ehead;
 		ehead = NULL;
@@ -674,7 +693,8 @@
 	if (stat(ttybuf, &sb) == 0) {
 		return (&sb);
 	} else {
-		warn("%s", ttybuf);
+        fprintf(stderr, "w: %s: %s\n", ttybuf, strerror(errno));
+        // warn("%s", ttybuf);
 		return (NULL);
 	}
 }
