diff -Naur libarchive-54/config.h libarchive/config.h
--- libarchive-54/config.h	2012-04-17 04:07:27.000000000 +0200
+++ libarchive/config.h	2018-01-23 22:31:16.000000000 +0100
@@ -222,7 +222,7 @@
 /* #undef HAVE_LIBEXPAT */
 
 /* Define to 1 if you have the `lzma' library (-llzma). */
-#define HAVE_LIBLZMA 1
+// #define HAVE_LIBLZMA 1
 
 /* Define to 1 if you have the `lzmadec' library (-llzmadec). */
 /* #undef HAVE_LIBLZMADEC */
@@ -274,7 +274,7 @@
 /* #undef HAVE_LZMADEC_H */
 
 /* Define to 1 if you have the <lzma.h> header file. */
-#define HAVE_LZMA_H 1
+// #define HAVE_LZMA_H 1
 
 /* Define to 1 if you have the `MD5Init' function. */
 /* #undef HAVE_MD5INIT */
diff -Naur libarchive-54/libarchive/libarchive/archive_check_magic.c libarchive/libarchive/libarchive/archive_check_magic.c
--- libarchive-54/libarchive/libarchive/archive_check_magic.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive/archive_check_magic.c	2018-01-23 22:31:16.000000000 +0100
@@ -46,6 +46,7 @@
 #endif
 
 #include "archive_private.h"
+#include "ios_error.h"
 
 static void
 errmsg(const char *m)
@@ -54,7 +55,7 @@
 	ssize_t written;
 
 	while (s > 0) {
-		written = write(2, m, strlen(m));
+        written = fwrite(m, 1, strlen(m), thread_stderr); //write(2, m, strlen(m));
 		if (written <= 0)
 			return;
 		m += written;
diff -Naur libarchive-54/libarchive/libarchive/archive_read_support_format_iso9660.c libarchive/libarchive/libarchive/archive_read_support_format_iso9660.c
--- libarchive-54/libarchive/libarchive/archive_read_support_format_iso9660.c	2012-09-21 00:45:16.000000000 +0200
+++ libarchive/libarchive/libarchive/archive_read_support_format_iso9660.c	2018-01-23 22:31:16.000000000 +0100
@@ -50,6 +50,7 @@
 #include "archive_private.h"
 #include "archive_read_private.h"
 #include "archive_string.h"
+#include "ios_error.h"
 
 /*
  * An overview of ISO 9660 format:
@@ -1880,25 +1881,25 @@
 #if DEBUG
 	/* DEBUGGING: Warn about attributes I don't yet fully support. */
 	if ((flags & ~0x02) != 0) {
-		fprintf(stderr, "\n ** Unrecognized flag: ");
-		dump_isodirrec(stderr, isodirrec);
-		fprintf(stderr, "\n");
+		fprintf(thread_stderr, "\n ** Unrecognized flag: ");
+		dump_isodirrec(thread_stderr, isodirrec);
+		fprintf(thread_stderr, "\n");
 	} else if (toi(isodirrec + DR_volume_sequence_number_offset, 2) != 1) {
-		fprintf(stderr, "\n ** Unrecognized sequence number: ");
-		dump_isodirrec(stderr, isodirrec);
-		fprintf(stderr, "\n");
+		fprintf(thread_stderr, "\n ** Unrecognized sequence number: ");
+		dump_isodirrec(thread_stderr, isodirrec);
+		fprintf(thread_stderr, "\n");
 	} else if (*(isodirrec + DR_file_unit_size_offset) != 0) {
-		fprintf(stderr, "\n ** Unexpected file unit size: ");
-		dump_isodirrec(stderr, isodirrec);
-		fprintf(stderr, "\n");
+		fprintf(thread_stderr, "\n ** Unexpected file unit size: ");
+		dump_isodirrec(thread_stderr, isodirrec);
+		fprintf(thread_stderr, "\n");
 	} else if (*(isodirrec + DR_interleave_offset) != 0) {
-		fprintf(stderr, "\n ** Unexpected interleave: ");
-		dump_isodirrec(stderr, isodirrec);
-		fprintf(stderr, "\n");
+		fprintf(thread_stderr, "\n ** Unexpected interleave: ");
+		dump_isodirrec(thread_stderr, isodirrec);
+		fprintf(thread_stderr, "\n");
 	} else if (*(isodirrec + DR_ext_attr_length_offset) != 0) {
-		fprintf(stderr, "\n ** Unexpected extended attribute length: ");
-		dump_isodirrec(stderr, isodirrec);
-		fprintf(stderr, "\n");
+		fprintf(thread_stderr, "\n ** Unexpected extended attribute length: ");
+		dump_isodirrec(thread_stderr, isodirrec);
+		fprintf(thread_stderr, "\n");
 	}
 #endif
 	register_file(iso9660, file);
@@ -2678,7 +2679,7 @@
 		parent_key = heap->files[parent]->key;
 		if (file_key >= parent_key) {
 			heap->files[hole] = file;
-			return;
+			return 0; // Non-void function should return a value
 		}
 		// Move parent into hole <==> move hole up tree.
 		heap->files[hole] = heap->files[parent];
diff -Naur libarchive-54/libarchive/libarchive/archive_read_support_format_xar.c libarchive/libarchive/libarchive/archive_read_support_format_xar.c
--- libarchive-54/libarchive/libarchive/archive_read_support_format_xar.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive/archive_read_support_format_xar.c	2018-01-23 22:31:16.000000000 +0100
@@ -23,6 +23,7 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 #include "archive_platform.h"
+
 __FBSDID("$FreeBSD$");
 
 #ifdef HAVE_ERRNO_H
@@ -49,6 +50,7 @@
 #ifdef HAVE_ZLIB_H
 #include <zlib.h>
 #endif
+#include "ios_error.h"
 
 #include "archive.h"
 #include "archive_endian.h"
@@ -88,8 +90,8 @@
 	unsigned char *x = (unsigned char *)(uintptr_t)d;	\
 	unsigned char c = x[outbytes-1];			\
 	x[outbytes - 1] = 0;					\
-	fprintf(stderr, "%s", x);				\
-	fprintf(stderr, "%c", c);				\
+	fprintf(thread_stderr, "%s", x);				\
+	fprintf(thread_stderr, "%c", c);				\
 	x[outbytes - 1] = c;					\
 } while (0)
 #else
@@ -1801,7 +1803,7 @@
 	struct unknown_tag *tag;
 
 #if DEBUG
-	fprintf(stderr, "unknowntag_start:%s\n", name);
+	fprintf(thread_stderr, "unknowntag_start:%s\n", name);
 #endif
 	tag = malloc(sizeof(*tag));
 	if (tag == NULL)
@@ -1822,7 +1824,7 @@
 	struct unknown_tag *tag;
 
 #if DEBUG
-	fprintf(stderr, "unknowntag_end:%s\n", name);
+	fprintf(thread_stderr, "unknowntag_end:%s\n", name);
 #endif
 	tag = xar->unknowntags;
 	if (tag == NULL || name == NULL)
@@ -1847,9 +1849,9 @@
 	xar = (struct xar *)(a->format->data);
 
 #if DEBUG
-	fprintf(stderr, "xml_sta:[%s]\n", name);
+	fprintf(thread_stderr, "xml_sta:[%s]\n", name);
 	for (attr = list->first; attr != NULL; attr = attr->next)
-		fprintf(stderr, "    attr:\"%s\"=\"%s\"\n",
+		fprintf(thread_stderr, "    attr:\"%s\"=\"%s\"\n",
 		    attr->name, attr->value);
 #endif
 	xar->base64text = 0;
@@ -2110,7 +2112,7 @@
 	xar = (struct xar *)(a->format->data);
 
 #if DEBUG
-	fprintf(stderr, "xml_end:[%s]\n", name);
+	fprintf(thread_stderr, "xml_end:[%s]\n", name);
 #endif
 	switch (xar->xmlsts) {
 	case INIT:
@@ -2533,7 +2535,7 @@
 			len = sizeof(buff)-1;
 		memcpy(buff, s, len);
 		buff[len] = 0;
-		fprintf(stderr, "\tlen=%d:\"%s\"\n", len, buff);
+		fprintf(thread_stderr, "\tlen=%d:\"%s\"\n", len, buff);
 	}
 #endif
 	switch (xar->xmlsts) {
diff -Naur libarchive-54/libarchive/libarchive/archive_read_support_format_zip.c libarchive/libarchive/libarchive/archive_read_support_format_zip.c
--- libarchive-54/libarchive/libarchive/archive_read_support_format_zip.c	2016-11-11 21:06:02.000000000 +0100
+++ libarchive/libarchive/libarchive/archive_read_support_format_zip.c	2018-01-23 22:31:16.000000000 +0100
@@ -37,6 +37,7 @@
 #ifdef HAVE_ZLIB_H
 #include <zlib.h>
 #endif
+#include "ios_error.h"
 
 #include "archive.h"
 #include "archive_entry.h"
@@ -845,7 +846,7 @@
 			return ARCHIVE_FAILED;
 		}
 #ifdef DEBUG
-		fprintf(stderr, "Header id 0x%04x, length %d\n",
+		fprintf(thread_stderr, "Header id 0x%04x, length %d\n",
 		    headerid, datasize);
 #endif
 		switch (headerid) {
@@ -866,7 +867,7 @@
 			if (flags & 0x01)
 			{
 #ifdef DEBUG
-				fprintf(stderr, "mtime: %lld -> %d\n",
+				fprintf(thread_stderr, "mtime: %lld -> %d\n",
 				    (long long)zip->mtime,
 				    archive_le32dec(p + offset));
 #endif
@@ -897,7 +898,7 @@
 		case 0x7855:
 			/* Info-ZIP Unix Extra Field (type 2) "Ux". */
 #ifdef DEBUG
-			fprintf(stderr, "uid %d gid %d\n",
+			fprintf(thread_stderr, "uid %d gid %d\n",
 			    archive_le16dec(p + offset),
 			    archive_le16dec(p + offset + 2));
 #endif
diff -Naur libarchive-54/libarchive/libarchive/archive_util.c libarchive/libarchive/libarchive/archive_util.c
--- libarchive-54/libarchive/libarchive/archive_util.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive/archive_util.c	2018-01-23 22:31:16.000000000 +0100
@@ -40,6 +40,7 @@
 #include "archive.h"
 #include "archive_private.h"
 #include "archive_string.h"
+#include "ios_error.h"  // remaps exit() to pthread_exit(NULL)
 
 #if ARCHIVE_VERSION_NUMBER < 3000000
 /* These disappear in libarchive 3.0 */
@@ -187,14 +188,15 @@
 __archive_errx(int retvalue, const char *msg)
 {
 	static const char *msg1 = "Fatal Internal Error in libarchive: ";
-	size_t s;
+	// size_t s;
 
-	s = write(2, msg1, strlen(msg1));
-	(void)s; /* UNUSED */
-	s = write(2, msg, strlen(msg));
-	(void)s; /* UNUSED */
-	s = write(2, "\n", 1);
-	(void)s; /* UNUSED */
+    fprintf(thread_stderr, "%s%s\n", msg1, msg);
+	// s = write(2, msg1, strlen(msg1));
+	// (void)s; /* UNUSED */
+	// s = write(2, msg, strlen(msg));
+	// (void)s; /* UNUSED */
+	// s = write(2, "\n", 1);
+	// (void)s; /* UNUSED */
 	exit(retvalue);
 }
 
diff -Naur libarchive-54/libarchive/libarchive/archive_windows.c libarchive/libarchive/libarchive/archive_windows.c
--- libarchive-54/libarchive/libarchive/archive_windows.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive/archive_windows.c	2018-01-23 22:31:16.000000000 +0100
@@ -248,7 +248,7 @@
 		lib = LoadLibrary("kernel32.dll");
 	}
 	if (lib == NULL) {
-		fprintf(stderr, "Can't load kernel32.dll?!\n");
+		fprintf(thread_stderr, "Can't load kernel32.dll?!\n");
 		exit(1);
 	}
 	return (void *)GetProcAddress(lib, name);
@@ -1171,7 +1171,7 @@
 		}
 	}
 
-	/* fprintf(stderr, "unrecognized win32 error code: %lu", e); */
+	/* fprintf(thread_stderr, "unrecognized win32 error code: %lu", e); */
 	errno = EINVAL;
 	return;
 }
diff -Naur libarchive-54/libarchive/libarchive/archive_write_set_format_pax.c libarchive/libarchive/libarchive/archive_write_set_format_pax.c
--- libarchive-54/libarchive/libarchive/archive_write_set_format_pax.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive/archive_write_set_format_pax.c	2018-01-23 22:31:16.000000000 +0100
@@ -40,6 +40,7 @@
 #include "archive_entry.h"
 #include "archive_private.h"
 #include "archive_write_private.h"
+#include "ios_error.h"  // remaps exit() to pthread_exit(NULL)
 
 struct pax {
 	uint64_t	entry_bytes_remaining;
@@ -943,8 +944,9 @@
 		if (r != 0) {
 			const char *msg = "archive_write_pax_header: "
 			    "'x' header failed?!  This can't happen.\n";
-			size_t u = write(2, msg, strlen(msg));
-			(void)u; /* UNUSED */
+            fprintf(thread_stderr, "%s", msg);
+			// size_t u = write(2, msg, strlen(msg));
+			// (void)u; /* UNUSED */
 			exit(1);
 		}
 		r = (a->compressor.write)(a, paxbuff, 512);
diff -Naur libarchive-54/libarchive/libarchive/archive_write_set_format_zip.c libarchive/libarchive/libarchive/archive_write_set_format_zip.c
--- libarchive-54/libarchive/libarchive/archive_write_set_format_zip.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive/archive_write_set_format_zip.c	2018-01-23 22:31:16.000000000 +0100
@@ -247,6 +247,7 @@
 	zip->len_buf = 65536;
 	zip->buf = malloc(zip->len_buf);
 	if (zip->buf == NULL) {
+        free(zip); 
 		archive_set_error(&a->archive, ENOMEM, "Can't allocate compression buffer");
 		return (ARCHIVE_FATAL);
 	}
diff -Naur libarchive-54/libarchive/libarchive/filter_fork.c libarchive/libarchive/libarchive/filter_fork.c
--- libarchive-54/libarchive/libarchive/filter_fork.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive/filter_fork.c	2018-01-23 22:31:16.000000000 +0100
@@ -24,6 +24,7 @@
  */
 
 #include "archive_platform.h"
+#include "ios_error.h"  // remaps exit() to pthread_exit(NULL)
 
 /* This capability is only available on POSIX systems. */
 #if defined(HAVE_PIPE) && defined(HAVE_FCNTL) && \
diff -Naur libarchive-54/libarchive/libarchive_fe/err.c libarchive/libarchive/libarchive_fe/err.c
--- libarchive-54/libarchive/libarchive_fe/err.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive_fe/err.c	2018-01-23 22:31:16.000000000 +0100
@@ -38,18 +38,19 @@
 #include <string.h>
 #endif
 
-#include "err.h"
+#include "lafe_err.h"   
+#include "ios_error.h"  // remaps exit() to pthread_exit(NULL)
 
-const char *lafe_progname;
+const __thread char *lafe_progname;
 
 static void
 lafe_vwarnc(int code, const char *fmt, va_list ap)
 {
-	fprintf(stderr, "%s: ", lafe_progname);
-	vfprintf(stderr, fmt, ap);
+	fprintf(thread_stderr, "%s: ", lafe_progname);
+	vfprintf(thread_stderr, fmt, ap);
 	if (code != 0)
-		fprintf(stderr, ": %s", strerror(code));
-	fprintf(stderr, "\n");
+		fprintf(thread_stderr, ": %s", strerror(code));
+	fprintf(thread_stderr, "\n");
 }
 
 void
diff -Naur libarchive-54/libarchive/libarchive_fe/err.h libarchive/libarchive/libarchive_fe/err.h
--- libarchive-54/libarchive/libarchive_fe/err.h	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive_fe/err.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,41 +0,0 @@
-/*-
- * Copyright (c) 2009 Joerg Sonnenberger
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
- * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
- * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef LAFE_ERR_H
-#define LAFE_ERR_H
-
-#if defined(__GNUC__) && (__GNUC__ > 2 || \
-                          (__GNUC__ == 2 && __GNUC_MINOR__ >= 5))
-#define __LA_DEAD       __attribute__((__noreturn__))
-#else
-#define __LA_DEAD
-#endif
-
-extern const char *lafe_progname;
-
-void	lafe_warnc(int code, const char *fmt, ...);
-void	lafe_errc(int eval, int code, const char *fmt, ...) __LA_DEAD;
-
-#endif
diff -Naur libarchive-54/libarchive/libarchive_fe/lafe_err.h libarchive/libarchive/libarchive_fe/lafe_err.h
--- libarchive-54/libarchive/libarchive_fe/lafe_err.h	1970-01-01 01:00:00.000000000 +0100
+++ libarchive/libarchive/libarchive_fe/lafe_err.h	2018-01-23 22:31:16.000000000 +0100
@@ -0,0 +1,41 @@
+/*-
+ * Copyright (c) 2009 Joerg Sonnenberger
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LAFE_ERR_H
+#define LAFE_ERR_H
+
+#if defined(__GNUC__) && (__GNUC__ > 2 || \
+                          (__GNUC__ == 2 && __GNUC_MINOR__ >= 5))
+#define __LA_DEAD       __attribute__((__noreturn__))
+#else
+#define __LA_DEAD
+#endif
+
+extern const __thread char *lafe_progname;
+
+void	lafe_warnc(int code, const char *fmt, ...);
+void	lafe_errc(int eval, int code, const char *fmt, ...) __LA_DEAD;
+
+#endif
diff -Naur libarchive-54/libarchive/libarchive_fe/line_reader.c libarchive/libarchive/libarchive_fe/line_reader.c
--- libarchive-54/libarchive/libarchive_fe/line_reader.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive_fe/line_reader.c	2018-01-23 22:31:16.000000000 +0100
@@ -32,8 +32,9 @@
 #include <stdlib.h>
 #include <string.h>
 
-#include "err.h"
+#include "lafe_err.h"
 #include "line_reader.h"
+#include "ios_error.h"
 
 #if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__BORLANDC__)
 #define strdup _strdup
@@ -68,7 +69,7 @@
 	lr->pathname = strdup(pathname);
 
 	if (strcmp(pathname, "-") == 0)
-		lr->f = stdin;
+		lr->f = thread_stdin;
 	else
 		lr->f = fopen(pathname, "r");
 	if (lr->f == NULL)
@@ -155,7 +156,7 @@
 		if (ferror(lr->f))
 			lafe_errc(1, errno, "Can't read %s", lr->pathname);
 		if (feof(lr->f)) {
-			if (lr->f != stdin)
+			if (lr->f != thread_stdin)
 				fclose(lr->f);
 			lr->f = NULL;
 		}
diff -Naur libarchive-54/libarchive/libarchive_fe/matching.c libarchive/libarchive/libarchive_fe/matching.c
--- libarchive-54/libarchive/libarchive_fe/matching.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/libarchive_fe/matching.c	2018-01-23 22:31:16.000000000 +0100
@@ -36,7 +36,7 @@
 #include <string.h>
 #endif
 
-#include "err.h"
+#include "lafe_err.h"
 #include "line_reader.h"
 #include "matching.h"
 #include "pathmatch.h"
diff -Naur libarchive-54/libarchive/tar/bsdtar.c libarchive/libarchive/tar/bsdtar.c
--- libarchive-54/libarchive/tar/bsdtar.c	2015-08-20 00:50:01.000000000 +0200
+++ libarchive/libarchive/tar/bsdtar.c	2018-01-23 22:31:16.000000000 +0100
@@ -70,7 +70,8 @@
 #include <copyfile.h>
 
 #include "bsdtar.h"
-#include "err.h"
+#include "lafe_err.h"
+#include "ios_error.h"
 
 #ifdef __MINGW32__
 int _CRT_glob = 0; /* Disable broken CRT globbing. */
@@ -118,7 +119,7 @@
 	 | ARCHIVE_EXTRACT_SECURE_NODOTDOT)
 
 int
-main(int argc, char **argv)
+tar_main(int argc, char **argv)
 {
 	struct bsdtar		*bsdtar, bsdtar_storage;
 	int			 opt, t;
@@ -135,6 +136,11 @@
 	memset(bsdtar, 0, sizeof(*bsdtar));
 	bsdtar->fd = -1; /* Mark as "unused" */
 	option_o = 0;
+    // init all flags:
+    opt = 0;
+    possible_help_request = 0;
+    t = 0;
+    bsdtar_getopt(NULL); // init parsing too
 
 #if defined(HAVE_SIGACTION) && (defined(SIGINFO) || defined(SIGUSR1))
 	{ /* Catch SIGINFO and SIGUSR1, if they exist. */
@@ -643,18 +649,18 @@
 
 	p = lafe_progname;
 
-	fprintf(stderr, "Usage:\n");
-	fprintf(stderr, "  List:    %s -tf <archive-filename>\n", p);
-	fprintf(stderr, "  Extract: %s -xf <archive-filename>\n", p);
-	fprintf(stderr, "  Create:  %s -cf <archive-filename> [filenames...]\n", p);
-	fprintf(stderr, "  Help:    %s --help\n", p);
+	fprintf(thread_stderr, "Usage:\n");
+	fprintf(thread_stderr, "  List:    %s -tf <archive-filename>\n", p);
+	fprintf(thread_stderr, "  Extract: %s -xf <archive-filename>\n", p);
+	fprintf(thread_stderr, "  Create:  %s -cf <archive-filename> [filenames...]\n", p);
+	fprintf(thread_stderr, "  Help:    %s --help\n", p);
 	exit(1);
 }
 
 static void
 version(void)
 {
-	printf("bsdtar %s - %s\n",
+	fprintf(thread_stdout, "bsdtar %s - %s\n",
 	    BSDTAR_VERSION_STRING,
 	    archive_version());
 	exit(0);
@@ -703,15 +709,15 @@
 
 	prog = lafe_progname;
 
-	fflush(stderr);
+	fflush(thread_stderr);
 
 	p = (strcmp(prog,"bsdtar") != 0) ? "(bsdtar)" : "";
-	printf("%s%s: manipulate archive files\n", prog, p);
+	fprintf(thread_stdout, "%s%s: manipulate archive files\n", prog, p);
 
 	for (p = long_help_msg; *p != '\0'; p++) {
 		if (*p == '%') {
 			if (p[1] == 'p') {
-				fputs(prog, stdout);
+				fputs(prog, thread_stdout);
 				p++;
 			} else
 				putchar('%');
diff -Naur libarchive-54/libarchive/tar/bsdtar_windows.c libarchive/libarchive/tar/bsdtar_windows.c
--- libarchive-54/libarchive/tar/bsdtar_windows.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/tar/bsdtar_windows.c	2018-01-23 22:31:16.000000000 +0100
@@ -290,7 +290,7 @@
 		}
 	}
 
-	/* fprintf(stderr, "unrecognized win32 error code: %lu", e); */
+	/* fprintf(thread_stderr, "unrecognized win32 error code: %lu", e); */
 	errno = EINVAL;
 	return;
 }
diff -Naur libarchive-54/libarchive/tar/cmdline.c libarchive/libarchive/tar/cmdline.c
--- libarchive-54/libarchive/tar/cmdline.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/tar/cmdline.c	2018-01-23 22:31:16.000000000 +0100
@@ -41,7 +41,7 @@
 #endif
 
 #include "bsdtar.h"
-#include "err.h"
+#include "lafe_err.h"
 
 /*
  * Short options for tar.  Please keep this sorted.
@@ -58,7 +58,7 @@
  * a small change to the code below.
  */
 
-static struct option {
+static struct tar_option {
 	const char *name;
 	int required;      /* 1 if this option requires an argument. */
 	int equivalent;    /* Equivalent short option. */
@@ -180,7 +180,12 @@
 	static int state = state_start;
 	static char *opt_word;
 
-	const struct option *popt, *match = NULL, *match2 = NULL;
+    if (bsdtar == NULL) {
+        state = state_start;
+        return 0;
+    }
+    
+ 	const struct tar_option *popt, *match = NULL, *match2 = NULL;
 	const char *p, *long_prefix = "--";
 	size_t optlength;
 	int opt = '?';
diff -Naur libarchive-54/libarchive/tar/getdate.c libarchive/libarchive/tar/getdate.c
--- libarchive-54/libarchive/tar/getdate.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/tar/getdate.c	2018-01-23 22:31:16.000000000 +0100
@@ -37,6 +37,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
+#include "ios_error.h"  // remaps exit() to pthread_exit(NULL)
 
 /* This file defines a single public function. */
 time_t get_date(time_t now, char *);
@@ -1024,12 +1025,12 @@
     time_t	d;
 
     while (*++argv != NULL) {
-	    (void)printf("Input: %s\n", *argv);
+	    (void)fprintf(thread_stdout, "Input: %s\n", *argv);
 	    d = get_date(*argv);
 	    if (d == -1)
-		    (void)printf("Bad format - couldn't convert.\n");
+		    (void)fprintf(thread_stdout, "Bad format - couldn't convert.\n");
 	    else
-		    (void)printf("Output: %s\n", ctime(&d));
+		    (void)fprintf(thread_stdout, "Output: %s\n", ctime(&d));
     }
     exit(0);
     /* NOTREACHED */
diff -Naur libarchive-54/libarchive/tar/read.c libarchive/libarchive/tar/read.c
--- libarchive-54/libarchive/tar/read.c	2016-08-27 00:40:00.000000000 +0200
+++ libarchive/libarchive/tar/read.c	2018-01-23 22:31:16.000000000 +0100
@@ -79,7 +79,8 @@
 #endif /* HAVE_QUARANTINE */
 
 #include "bsdtar.h"
-#include "err.h"
+#include "lafe_err.h"
+#include "ios_error.h"
 
 struct progress_data {
 	struct bsdtar *bsdtar;
@@ -128,20 +129,20 @@
 		return;
 
 	if (bsdtar->verbose)
-		fprintf(stderr, "\n");
+		fprintf(thread_stderr, "\n");
 	if (a != NULL) {
 		comp = archive_position_compressed(a);
 		uncomp = archive_position_uncompressed(a);
-		fprintf(stderr,
+		fprintf(thread_stderr,
 		    "In: %s bytes, compression %d%%;",
 		    tar_i64toa(comp), (int)((uncomp - comp) * 100 / uncomp));
-		fprintf(stderr, "  Out: %d files, %s bytes\n",
+		fprintf(thread_stderr, "  Out: %d files, %s bytes\n",
 		    archive_file_count(a), tar_i64toa(uncomp));
 	}
 	if (entry != NULL) {
-		safe_fprintf(stderr, "Current: %s",
+		safe_fprintf(thread_stderr, "Current: %s",
 		    archive_entry_pathname(entry));
-		fprintf(stderr, " (%s bytes)\n",
+		fprintf(thread_stderr, " (%s bytes)\n",
 		    tar_i64toa(archive_entry_size(entry)));
 	}
 }
@@ -315,7 +316,7 @@
 		if (mode == 't') {
 			/* Perversely, gtar uses -O to mean "send to stderr"
 			 * when used with -t. */
-			out = bsdtar->option_stdout ? stderr : stdout;
+			out = bsdtar->option_stdout ? thread_stderr : thread_stdout;
 
 			/*
 			 * TODO: Provide some reasonable way to
@@ -362,9 +363,9 @@
 			 * deferred '\n'.
 			 */
 			if (bsdtar->verbose) {
-				safe_fprintf(stderr, "x %s",
+				safe_fprintf(thread_stderr, "x %s",
 				    archive_entry_pathname(entry));
-				fflush(stderr);
+				fflush(thread_stderr);
 			}
 
 			// TODO siginfo_printinfo(bsdtar, 0);
@@ -393,16 +394,16 @@
 			}
 			if (r != ARCHIVE_OK) {
 				if (!bsdtar->verbose)
-					safe_fprintf(stderr, "%s",
+					safe_fprintf(thread_stderr, "%s",
 					    archive_entry_pathname(entry));
-				safe_fprintf(stderr, ": %s",
+				safe_fprintf(thread_stderr, ": %s",
 				    archive_error_string(a));
 				if (!bsdtar->verbose)
-					fprintf(stderr, "\n");
+					fprintf(thread_stderr, "\n");
 				bsdtar->return_value = 1;
 			}
 			if (bsdtar->verbose)
-				fprintf(stderr, "\n");
+				fprintf(thread_stderr, "\n");
 			if (r == ARCHIVE_FATAL)
 				break;
 		}
@@ -432,7 +433,7 @@
 	}
 
 	if (bsdtar->verbose > 2)
-		fprintf(stdout, "Archive Format: %s,  Compression: %s\n",
+		fprintf(thread_stdout, "Archive Format: %s,  Compression: %s\n",
 		    archive_format_name(a), archive_compression_name(a));
 
 	archive_read_finish(a);
diff -Naur libarchive-54/libarchive/tar/subst.c libarchive/libarchive/tar/subst.c
--- libarchive-54/libarchive/tar/subst.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/tar/subst.c	2018-01-23 22:31:16.000000000 +0100
@@ -33,12 +33,13 @@
 #include <regex.h>
 #include <stdlib.h>
 #include <string.h>
+#include "ios_error.h"
 
 #ifndef REG_BASIC
 #define	REG_BASIC 0
 #endif
 
-#include "err.h"
+#include "lafe_err.h"
 
 struct subst_rule {
 	struct subst_rule *next;
@@ -265,7 +266,7 @@
 		realloc_strcat(result, name);
 
 	if (print_match)
-		fprintf(stderr, "%s >> %s\n", path, *result);
+		fprintf(thread_stderr, "%s >> %s\n", path, *result);
 
 	return got_match;
 }
diff -Naur libarchive-54/libarchive/tar/tree.c libarchive/libarchive/tar/tree.c
--- libarchive-54/libarchive/tar/tree.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/tar/tree.c	2018-01-23 22:31:16.000000000 +0100
@@ -73,6 +73,7 @@
 #if defined(HAVE_WINDOWS_H) && !defined(__CYGWIN__)
 #include <windows.h>
 #endif
+#include "ios_error.h"
 
 #include "tree.h"
 
@@ -400,7 +401,7 @@
 	/* If we're called again after a fatal error, that's an API
 	 * violation.  Just crash now. */
 	if (t->visit_type == TREE_ERROR_FATAL) {
-		fprintf(stderr, "Unable to continue traversing"
+		fprintf(thread_stderr, "Unable to continue traversing"
 		    " directory heirarchy after a fatal error.");
 		abort();
 	}
diff -Naur libarchive-54/libarchive/tar/util.c libarchive/libarchive/tar/util.c
--- libarchive-54/libarchive/tar/util.c	2016-11-15 22:44:15.000000000 +0100
+++ libarchive/libarchive/tar/util.c	2018-01-23 22:31:16.000000000 +0100
@@ -60,7 +60,8 @@
 #endif
 
 #include "bsdtar.h"
-#include "err.h"
+#include "lafe_err.h"
+#include "ios_error.h"
 
 static size_t	bsdtar_expand_char(char *, size_t, char);
 static const char *strip_components(const char *path, int elements);
@@ -220,10 +221,10 @@
 
 	va_list ap;
 	va_start(ap, fmt);
-	vfprintf(stderr, fmt, ap);
+	vfprintf(thread_stderr, fmt, ap);
 	va_end(ap);
-	fprintf(stderr, " (y/N)? ");
-	fflush(stderr);
+	fprintf(thread_stderr, " (y/N)? ");
+	fflush(thread_stderr);
 
 	l = read(2, buff, sizeof(buff) - 1);
 	if (l <= 0)
diff -Naur libarchive-54/libarchive/tar/write.c libarchive/libarchive/tar/write.c
--- libarchive-54/libarchive/tar/write.c	2010-05-21 03:07:32.000000000 +0200
+++ libarchive/libarchive/tar/write.c	2018-01-23 22:31:16.000000000 +0100
@@ -88,9 +88,10 @@
 #include <libgen.h>
 #include <paths.h>
 #endif
+#include "ios_error.h"  // remaps exit() to pthread_exit(NULL)
 
 #include "bsdtar.h"
-#include "err.h"
+#include "lafe_err.h"
 #include "line_reader.h"
 #include "tree.h"
 
@@ -186,7 +187,7 @@
 		r = archive_write_set_format_by_name(a, bsdtar->create_format);
 	}
 	if (r != ARCHIVE_OK) {
-		fprintf(stderr, "Can't use format %s: %s\n",
+		fprintf(thread_stderr, "Can't use format %s: %s\n",
 		    bsdtar->create_format,
 		    archive_error_string(a));
 		usage();
@@ -511,7 +512,7 @@
 	bsdtar->diskreader = NULL;
 
 	if (bsdtar->option_totals) {
-		fprintf(stderr, "Total bytes written: %s\n",
+		fprintf(thread_stderr, "Total bytes written: %s\n",
 		    tar_i64toa(archive_position_compressed(a)));
 	}
 
@@ -607,7 +608,7 @@
 		    !yes("copy '%s'", archive_entry_pathname(in_entry)))
 			continue;
 		if (bsdtar->verbose)
-			safe_fprintf(stderr, "a %s",
+			safe_fprintf(thread_stderr, "a %s",
 			    archive_entry_pathname(in_entry));
 		if (need_report())
 			report_write(bsdtar, a, in_entry, 0);
@@ -619,7 +620,7 @@
 				    archive_entry_pathname(in_entry),
 				    archive_error_string(a));
 			else
-				fprintf(stderr, ": %s", archive_error_string(a));
+				fprintf(thread_stderr, ": %s", archive_error_string(a));
 		}
 		if (e == ARCHIVE_FATAL)
 			exit(1);
@@ -632,7 +633,7 @@
 		}
 
 		if (bsdtar->verbose)
-			fprintf(stderr, "\n");
+			fprintf(thread_stderr, "\n");
 	}
 
 	/* Note: If we got here, we saw no write errors, so return success. */
@@ -932,7 +933,7 @@
 		/* Display entry as we process it.
 		 * This format is required by SUSv2. */
 		if (bsdtar->verbose)
-			safe_fprintf(stderr, "a %s",
+			safe_fprintf(thread_stderr, "a %s",
 			    archive_entry_pathname(entry));
 
 		/* Non-regular files get archived with zero size. */
@@ -949,7 +950,7 @@
 		}
 
 		if (bsdtar->verbose)
-			fprintf(stderr, "\n");
+			fprintf(thread_stderr, "\n");
 	}
 	archive_entry_free(entry);
 	tree_close(tree);
@@ -973,7 +974,7 @@
 				lafe_warnc(errno,
 				    "%s: could not open file", pathname);
 			else
-				fprintf(stderr, ": %s", strerror(errno));
+				fprintf(thread_stderr, ": %s", strerror(errno));
 			return;
 		}
 	}
@@ -985,7 +986,7 @@
 			    archive_entry_pathname(entry),
 			    archive_error_string(a));
 		else
-			fprintf(stderr, ": %s", archive_error_string(a));
+			fprintf(thread_stderr, ": %s", archive_error_string(a));
 	}
 
 	if (e == ARCHIVE_FATAL)
@@ -1016,19 +1017,19 @@
 {
 	uint64_t comp, uncomp;
 	if (bsdtar->verbose)
-		fprintf(stderr, "\n");
+		fprintf(thread_stderr, "\n");
 	comp = archive_position_compressed(a);
 	uncomp = archive_position_uncompressed(a);
-	fprintf(stderr, "In: %d files, %s bytes;",
+	fprintf(thread_stderr, "In: %d files, %s bytes;",
 	    archive_file_count(a), tar_i64toa(uncomp));
-	fprintf(stderr,
+	fprintf(thread_stderr,
 	    " Out: %s bytes, compression %d%%\n",
 	    tar_i64toa(comp), (int)((uncomp - comp) * 100 / uncomp));
 	/* Can't have two calls to tar_i64toa() pending, so split the output. */
-	safe_fprintf(stderr, "Current: %s (%s",
+	safe_fprintf(thread_stderr, "Current: %s (%s",
 	    archive_entry_pathname(entry),
 	    tar_i64toa(progress));
-	fprintf(stderr, "/%s bytes)\n",
+	fprintf(thread_stderr, "/%s bytes)\n",
 	    tar_i64toa(archive_entry_size(entry)));
 }
 
